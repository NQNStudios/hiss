(defmacro register-function (class function name &optional keep-args-wrapped)
    `(defun ,name (&rest args)
        (call-haxe ,class ,function args nil ,keep-args-wrapped)))
(register-function Hiss-Tools "print" print t)
(register-function Hiss-Tools "first" first t)
(register-function Hiss-Tools "rest" rest t)

(defun not (arg)
    (if arg nil t))
(defmacro or (&rest args)
    `(if (not ',args) nil
        (if (not ,(first args)) (or ,@(rest args)) ,(first args))))


(register-function Type "resolveClass" resolve-class)
(register-function Type "resolveEnum" resolve-enum)
(defmacro import (type-path name)
    `(defvar ,name (or (resolve-class ,type-path) (resolve-enum ,type-path))))

(import "Sys" Sys)
(register-function Sys "exit" exit)
(defun quit () (exit 0))

(defun list (&rest args) args)