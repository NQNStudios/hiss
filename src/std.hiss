(defun + (&rest args)
    (if (haxe== (length args) 1)
        (first args)
        (if (haxe== (length args) 0)
            0
            (if (haxe== (length args) 2)
                (haxe+ (first args) (first (rest args)))
                (+ (+ (first args) (first (rest args))) (funcall (resolve "+") (rest (rest args))))))))
---
(defmacro bind (pair)
    `(setlocal ,(first pair) ,(first (rest pair))))
---
(defun progn (&rest exps)
    (if (haxe== (length exps) 1) (first exps) (eval (cons 'progn (rest exps)))))
---
(defmacro let (bindings &rest body)
    `(progn 
        (scope-in)
        (dolist ,bindings setlocal)
        (dolist ,body eval)
        (scope-out)))
---
(defun map (list func &optional result)
    (        
    ))