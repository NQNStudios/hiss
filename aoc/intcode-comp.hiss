(defun load-intcode (input-num)
    (let ((file (+ "aoc/input" input-num ".txt"))
        (codes (map (split (getContent file) ",") parseInt)))
        (setq program codes)))
(defun execute (input-num noun verb)
    (load-intcode input-num)
    (setq counter 0)
    (set-nth program 1 noun)
    (set-nth program 2 verb)
    (println (run)))
(defun run ()
    (setlocal instruction (nth program counter))
    (if (haxe== instruction 99)
        (nth program 0)
        (progn 
            (setlocal 
                a-idx (nth program (haxe+ counter 1))
                b-idx (nth program (haxe+ counter 2))
                c-idx (nth program (haxe+ counter 3))
                a-val (nth program a-idx)
                b-val (nth program b-idx))
            (if (haxe== instruction 1)
                (setlocal value (haxe+ a-val b-val))
                (if (haxe== instruction 2)
                    (setlocal value (haxe* a-val b-val))
                    "error"))
            (set-nth program c-idx value)
            (setq counter (+ counter 4))
            (run))))