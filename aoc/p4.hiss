(setq range-min 245318)
(setq range-max 765747)
(defun problem-range ()
    (range range-min (+ 1 range-max)))

(defun contains-adjacent-repeat (str)
    (setq result nil)
    (do-for idx (range (- (length str) 1))
        (let (one (charAt str idx)
                two (charAt str (+ idx 1))
                three (charAt str (+ idx 2)))
            ;(print (+ one two three))
            (if (= one two)
                (setq result t))
            (if (= one three) (progn
                (setq result nil) (break)))))
    result)

(defun digits-never-decrease (str)
    (let (digits (for digit (split str "") (parseInt digit)))
        (eval (cons '<= digits))))

(defun number-matches (num)
    (let (str (string num))
        (and
            (= (length str) 6)
            (<= range-min num range-max)
            (contains-adjacent-repeat str)
            (digits-never-decrease str))))

(defun ascending-digits (digit)
    "Return the potential digits that can follow the given digit without breaking da rulez"
    (for dig (range digit 10) dig))

(setq ascending-digit-numbers '())
(defun collect-ascending-digit-numbers (digits-so-far digits-total)
    (let (last-digit (nth digits-so-far (- (length digits-so-far) 1))
            next-digits (ascending-digits last-digit)
            sequences (for next-digit next-digits (append digits-so-far `(,next-digit))))
        (if (= (length digits-so-far) (- digits-total 1))
            (setq ascending-digit-numbers (append ascending-digit-numbers sequences))
            (do-for sequence sequences (collect-ascending-digit-numbers sequence digits-total)))))

;(print (ascending-digit-numbers '(2) 2))
;(print (ascending-digit-numbers '(2) 3))
;(collect-ascending-digit-numbers '(2) 6))
;(print ascending-digit-numbers)

(defun part1 ()
    (setlocal lowest-first-digit (parseInt (charAt (string range-min) 0)))
    (setlocal total 0)
    (do-for first-digit (ascending-digits lowest-first-digit)
        (setq ascending-digit-numbers '())
        (print (+ "collecting numbers starting with " first-digit))
        (collect-ascending-digit-numbers `(,first-digit) 6)
        (setlocal total (+ total (length (filter (for i ascending-digit-numbers (number-matches (parseInt (join i "")))))))))
    (print total))