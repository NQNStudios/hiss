; Points are in the form '(x y)
; Lines are in the form '(point-a point-b)

(setq origin '(0 0))
(defun x (point) (nth point 0))
(defun y (point) (nth point 1))

(defun point-a (line) (nth line 0))
(defun point-b (line) (nth line 1))

(defun vertical (line)
    (= (x (point-a line)) (x (point-b line))))

(defun horizontal (line)
    (not (vertical line)))

(defun line-y1 (vertical-line)
    (y (point-a vertical-line)))

(defun line-y2 (vertical-line)
    (y (point-b vertical-line)))

(defun line-x (vertical-line)
    (x (point-a vertical-line)))

(defun line-x1 (horizontal-line)
    (x (point-a horizontal-line)))

(defun line-x2 (horizontal-line)
    (x (point-b horizontal-line)))

(defun line-y (horizontal-line)
    (y (point-a horizontal-line)))

; TODO this is broken
(defun intersection (line-a line-b)
    (let (a-vertical (vertical line-a)
        b-vertical (vertical line-b))
        (when (not (= a-vertical b-vertical))
            (setlocal h--line (if a-vertical line-b line-a))
            (setlocal v--line (if a-vertical line-a line-b))
            (setlocal h--y (line-y h--line))
            (setlocal h--x1 (line-x1 h--line))
            (setlocal h--x2 (line-x2 h--line))
            (setlocal v--x (line-x v--line))
            (setlocal v--y1 (line-y1 v--line))
            (setlocal v--y2 (line-y2 v--line))
            (setlocal ix (if (between-exclusive v--x h--x1 h--x2) v--x))
            (setlocal iy (if (between-exclusive h--y v--y1 v--y2) h--y))
            (print ix)
            (print iy)
            (if (and ix iy) `(,ix ,iy)))))

(defun point-eq (point-a point-b)
    (and 
        (= 
            (x point-a) 
            (x point-b)) 
        (= 
            (y point-a) 
            (y point-b))))

(setq min-x 0 max-x 0 min-y 0 max-y 0)
(defun add (point-a point-b)
    (let (result-x (+ (x point-a) (x point-b))
            result-y (+ (y point-a) (y point-b)))
        (setq min-x (min min-x result-x)
            max-x (max max-x result-x)
            min-y (min min-y result-y)
            max-y (max max-y result-y))
        `(,result-x ,result-y)))

(defun distance (point-a point-b)
    ;(print point-a)
    ;(print point-b)
    (+
        (abs (- (x point-a) (x point-b)))
        (abs (- (y point-a) (y point-b)))))

(defun move (point movement)
    (let (dir (char-at movement 0)
        dist (parse-int (substr movement 1)))
        (add
            point
            (case dir
                ("U" `(0 ,dist))
                ("D" `(0 ,(- dist)))
                ("L" `(,(- dist) 0))
                ("R" `(,dist 0))))))

(defun wire-lines (wire)
    (setq wire--location origin)
    (map (split wire ",")
        (lambda (movement)
            `(,wire--location ,(setq wire--location (move wire--location movement))))))

(defun test-funs ()
    (let (line-a `(,origin ,(move origin "L3"))
        line-b `(,origin ,(move origin "R3"))
        line-c `(,origin ,(move origin "U5")))
            (print (vertical line-a))
            (print (vertical line-b))
            (print (vertical line-c))
            (print (intersection line-a line-b))
            (print (intersection line-a line-c))))

(defun line-dist-from-origin (line)
    (distance (point-a line) origin))

(defun load-wires (input)
    (let (data-lines (split-lines (get-content (+ "aoc/input" input ".txt"))))
        (setq wire1 
            ;(sort-by 
                (wire-lines (nth data-lines 0))
         ; line-dist-from-origin)
         )
        (setq wire2 
            ;(sort-by 
                (wire-lines (nth data-lines 1))
            ; line-dist-from-origin)
            )))

(setq intersections '())
(setq dist-from-origin (apply-partially distance origin))
(setq closest-intersection nil)

(defun find-intersections ()
    (dolist wire1
        (lambda (line)
            ;(print line)
            (setq line--a line)
            (dolist wire2
                (lambda (line)
                    ;(print line)
                    (setq line--b line)
                    (setlocal this-intersection (intersection line--a line--b))
                    (when this-intersection
                        (if (bound? 'part2-prints) (print this-intersection))
                        (push intersections this-intersection) 
                        (setlocal dist (dist-from-origin this-intersection))
                        (setq closest-intersection 
                            (if (not closest-intersection) 
                                dist
                                (min dist closest-intersection)))
                        (if (bound? 'part1-prints) (print closest-intersection))))))))

(defun part1 ()
    (setq part1-prints t)
    (load-wires 3)
    (find-intersections))

(defun part2-step1 ()
    (setq part2-prints t)
    (load-wires 3000)
    (find-intersections))

(defun steps (line) (distance (point-a line) (point-b line)))
(defun contains-point (line point)
    (between-inclusive (x point) (x (point-a line)) (x (point-b line))))

(defun nil-list (size)
    (for i (range size) nil))

(defun part2-step2 ()
    ;Hard-coded result of part2-step1
    (setq intersections '(
        (339 0)
        (531 -1399)
        (1013 -1399)
        (488 -1384)
        (488 -1147)
        (541 -1147)
        (531 -1464)
        (516 -1384)
        (516 -1147)
        (249 -770)
        (342 -770)
        (177 -439)
        (177 -357)
        (177 -767)
        (-103 -170)
        (-362 -170)
        (-362 -207)
        (-355 -792)
        (-355 -293)
        (-355 -439)
        (-122 -949)
        (249 -949)
        (342 -949)))
    (load-wires)
    (print "done loading wires")
    (setlocal wire1-steps (nil-list (length intersections)))
    (setlocal wire2-steps (nil-list (length intersections)))
    (defun check-for-intersection (result-list line)
        (do-for idx (range (length intersections))
            (when (contains-point line (nth intersections idx))
                (print idx)
                (print (eval `(if (not (nth ,result-list ,idx)) (set-nth ,result-list ,idx ,(+ step-total (distance (nth intersections idx) (point-a line))))))))
            (setq step-total (+ step-total (steps line))))) 
    
    ;(setq step-total 0)
    ;(dolist wire1 (apply-partially check-for-intersection 'wire1-steps))
    ;(print wire1-steps)

    (setq step-total 0)
    (dolist wire2 (apply-partially check-for-intersection 'wire2-steps))
    (print wire2-steps)
    )

(defun part2-step3 ()
    (setq wire1-steps '(339 2939 84712 4899 5671 6733 8049 8963 9735 10100 11202 11715 12642 14061 364703 334925 335037 335778 335428 335723 368477 22387 23489))
    (setq wire2-steps '(99873 99198 143700 100234 101003 145319 101793 102390 103159 103801 104426 105124 105738 105860 82829 83481 84355 84688 86098 86863 87497 110006 110631))
    
    (print (funcall min (for pair (zip wire1-steps wire2-steps) (sum pair)) nil))

    )