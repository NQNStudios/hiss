(defun load-input (num)
    (setq orbit-pairs (for line (split-lines (getContent (+ "aoc/input" num ".txt"))) (split line ")")))
    (setq leaf-objects (eval (cons 'dict (for pair orbit-pairs `(,(nth pair 1) t)))))
    (setq non-leaf-objects (eval (cons 'dict (for pair orbit-pairs `(,(nth pair 0) t)))))
    (do-for non-leaf (keys non-leaf-objects)
        (if (get-in-dict leaf-objects non-leaf)
            (erase-in-dict leaf-objects non-leaf)))
    (setq leaf-objects (keys leaf-objects))
    (setq orbit-dict (eval (cons 'dict (for pair orbit-pairs (swap-nth pair 0 1))))))

(defun orbit-chain (object)
    (setq g--chain '())
    (setq g--object object)
    (while (not (= g--object "COM"))
        ; (print g--chain)
        (push g--chain g--object)
        (setq g--object (get-in-dict orbit-dict g--object)))
    g--chain)

(defun orbits-in-chain (chain)
    (let (biggest-chain (length chain))
        (/ (* biggest-chain (+ biggest-chain 1)) 2)))

(defun test-part1 ()
    (load-input 6000)
    (print (orbit-chain "L"))
    (print (orbit-chain "L"))
    ;(print (sum (for leaf leaf-objects (orbits-in-chain (orbit-chain leaf)))))
    )
(test-part1)

(defun part1 ()
    (load-input 6)
    (print (sum (for leaf leaf-objects (orbits-in-chain (orbit-chain leaf))))))