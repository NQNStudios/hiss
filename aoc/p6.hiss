(defun load-input (num)
    (setq orbit-pairs (for line (split-lines (getContent (+ "aoc/input" num ".txt"))) (split line ")")))
    (setq leaf-objects (eval (cons 'dict (for pair orbit-pairs `(,(nth pair 1) t)))))
    (setq non-leaf-objects (eval (cons 'dict (for pair orbit-pairs `(,(nth pair 0) t)))))
    (do-for non-leaf (keys non-leaf-objects)
        (if (get-in-dict leaf-objects non-leaf)
            (erase-in-dict leaf-objects non-leaf)))
    (setq leaf-objects (keys leaf-objects))
    (setq orbit-dict (eval (cons 'dict (for pair orbit-pairs (swap-nth pair 0 1))))))

(defun orbit-chain (object)
    (let (chain '())
        (while (not (= object "COM"))
            (push chain object)
            (setlocal object (get-in-dict orbit-dict object)))
        chain))

(defun orbits-in-chain (chain)
    (let (biggest-chain (length chain))
        (/ (* biggest-chain (+ biggest-chain 1)) 2)))

(defun orbit-sum ()
    (setq sum 0)
    (setq calculated-objects (dict))
    (setq progress 0)
    (for leaf leaf-objects
        (print (/ progress (length leaf-objects)))
        (let (chain (orbit-chain leaf))
            (setq sum (+ sum (orbits-in-chain chain)))
            (do-for object chain
                (if (get-in-dict calculated-objects object)
                    (progn (setq sum (- sum (orbits-in-chain (orbit-chain object))))(break))))
            (for object chain
                (set-in-dict calculated-objects object t))
            (setq progress (+ progress 1))))
    sum)

(defun test-part1 ()
    (load-input 6000)
    (print (orbit-chain "L"))
    (print (orbit-chain "L"))
    (print (orbit-sum)))
(test-part1)

(defun part1 ()
    (load-input 6)
    (print (orbit-sum)))