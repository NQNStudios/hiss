(message! "Testing Hiss standard library for version $(version)")

(test! or
    // Test with booleans:
    (eq nil (or))
    (eq t (or t))
    (eq t (or nil t))
    (eq nil (or nil nil))

    // Test with other values:
    (eq 5 (or nil 5))
    (eq nil (or nil (> 5 6)))
    (or (> 6 5) (> 5 6))
    (or (> 5 6) (> 6 5))

    // Test short-circuiting:
    (setlocal! short-circuit t)
    (eq t (or t (setlocal! short-circuit nil)))
    short-circuit

    // Test against stack overflows:
    (eq t (or nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil t)))

(test! and
    // Test with booleans:
    (eq t (and))
    (eq t (and t))
    (eq nil (and nil t))
    (eq nil (and t nil))

    // Test with other values:
    (eq 5 (and 6 5))
    (eq nil (and t (> 5 6)))
    (eq nil (and (> 6 5) (> 5 6)))
    (eq nil (and (> 5 6) (> 6 5)))
    (eq t (and (> 6 5) (> 7 5)))

    // Test short-circuiting:
    (setlocal! short-circuit t)
    (eq nil (and nil (setlocal! short-circuit nil)))
    short-circuit

    // Test against stack overflows:
    (eq t (and t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t)))

(test! pop!
    ; Allow popping from a list literal
    (eq 4 (pop! (list 1 2 3 4)))
    (eq nil (pop! (list))) // TODO is this desirable?
    ; Popping from a variable should modify in place
    (setlocal! l (list 1 2 3 4))
    (eq 4 (pop! l))
    (eq (list 1 2 3) l)
    (eq 3 (pop! l)))

(test! shift!
    (eq 1 (shift! (list 1 2 3 4)))
    (eq nil (shift! (list)))
    (setlocal! l (list 1 2 3 4))
    (eq 1 (shift! l))
    (eq (list 2 3 4) l)
    (eq 2 (shift! l)))

(test! take!
    (setlocal! l (list 1 2 3 4 5))
    (eq (list 1 2 3) (take! l 3))
    (eq (list 4 5) l))

(test! drop!
    (setlocal! l (list 1 2 3 4 5))
    (eq (list 3 4 5) (drop! l 2)))

(test! for
    (eq (list 7 8 9) (for i (list 1 2 3) (+ i 6)))
    (eq (list 0 2 4 6) (for i (range 7) (if (= 1 (% i 2)) (continue) i)))
    (eq (list 0 1 2 3 4) (for i (range 7) (if (= 5 i) (break) i))))

(test! do-for
    (not (do-for i (list 1 2 3) i))
    (prints "1\n2\n3" (do-for i (list 1 2 3) (print i))))

(test! map
    (eq (list 7 8 9) (map (list 1 2 3) (lambda (i) (+ i 6)))))

(test! do-map
    (not (do-map (list 1 2 3) (lambda (i) i)))
    (prints "1\n2\n3" (do-map (list 1 2 3) print)))

(test! continuation-iteration
    (defun one-three-five () (for i (range 8) (cond ((= 1 (% i 2)) i) ((= 6 i) (break)) (t (continue)))))
    (eq (list 1 3 5) (one-three-five))
    (nil? (enable-cc!))
    (eq (list 1 3 5) (one-three-five))
    (nil? (disable-cc!))
    (eq (list 1 3 5) (one-three-five)))

(test! eval
    ; Test evaluating globals
    (eq eval (eval 'eval))
    ; Test evaluating locals
    (setlocal! test-var 5)
    (= 5 (eval 'test-var)))

(test! bind
    (prints "\"hello\"" (let (my-print (bind print "hello")) (my-print)))
    (setlocal! offset (bind + 6))
    (= 11 (offset 5))
    ; test binding macro/special form
    (setlocal! false (bind and nil))
    (not (false t))
    ; test binding with gaps
    (defun printn (&rest args)
        (do-map args print))
    (prints "\"a\"\n\"c\"\n\"b\"" (let (print-out-of-order (bind printn "a" _ "b")) (print-out-of-order "c")))
    ; test that bind args are evaluated
    (setlocal! arg 5)
    (setlocal! offset (bind + arg))
    (= 5 (offset 0)))

(test! rbind
    (setlocal! fifth-of (rbind / 5))
    (= 1 (fifth-of 5))
    (setlocal! list-burrito (rbind list 'tortilla _ 'tortilla))
    (eq '(sauce tortilla meat tortilla) (list-burrito 'sauce 'meat)))

(test! (nth first second third fourth fifth sixth seventh eighth ninth tenth)
    (setlocal! l (list 1 2 3 4 5 6 7 8 9 10))
    (= 1 (nth l 0))
    (= 10 (nth l 9))
    (= 1 (first l))
    (= 2 (second l))
    (= 3 (third l))
    (= 4 (fourth l))
    (= 5 (fifth l))
    (= 6 (sixth l))
    (= 7 (seventh l))
    (= 8 (eighth l))
    (= 9 (ninth l))
    (= 10 (tenth l))
    (= 10 (nth l -1)))

(test! message
    (prints "Hello world" (message "Hello world")))

(test! symbol
    (setlocal! you "me")
    (eq 'hey-me (symbol "hey-$you"))
    (not (eq (symbol) (symbol))))

(test! symbol-name
    (eq "hey" (symbol-name 'hey)))

(test! variable-capture
    (let (value 5)
        (defun return-value () value))
    (= 5 (return-value)))

(test! read-strings
    (eq #"\"# "\\")
    (eq #"""# "\"")
    (eq #"$"# "\$"))

(test! return
    (defun cut-off-early () (return 5) 6)
    (= (cut-off-early) 5)
    (nil? (enable-cc!))
    (= (cut-off-early) 5)
    (nil? (disable-cc!)))

(test! string-interpolation
    // TODO test interpolating all types of primitives
    (setlocal! i 5)
    (setlocal! f 5.5)
    (setlocal! sy 'hey-symbol)
    (setlocal! st "hey")
    (setlocal! l (list 5 5.5 'hey-symbol "hey"))
    (eq "5. hey-symbol" "${i}. $sy")
    (eq "10.5" "$(+ i f)")
    (eq #"(5 5.5 hey-symbol "hey")"# "$l")
    (eq "hey!" "${st}!")
    (eq "hey you" "$st you"))

(test! (dict dict-get dict-set! dict-contains dict-erase!)
    (setlocal! d (dict "StringKey" "StringValue" 
                        0 5 
                        (list "ListKey") 9))
    
    (dict-contains d "StringKey")
    (dict-contains d 0)
    (dict-contains d (list "ListKey"))
    
    (eq "StringValue" (dict-get d "StringKey"))
    (eq 5 (dict-get d 0))
    (eq 9 (dict-get d (list "ListKey")))

    (or (dict-set! d "StringKey" "DifferentStringValue") t)
    (dict-contains d "StringKey")
    (eq "DifferentStringValue" (dict-get d "StringKey"))

    (or (dict-erase! d "StringKey") t)
    (not (dict-contains d "StringKey")))

(test! dict-iteration
    (setlocal! d (dict "StringKey" "StringValue"
                        0 5
                        (list "ListKey") 9))
    (eq 6 (length (apply append (for (key value) d (list key value))))))

(test! +
    (= 5 (+ 2 3))
    (= 5 (+ 1 2 2))
    (= 5 (+ 10 -5))
    (= -5 (+ -5)))

(test! -
    (= -1 (- 1))
    (= 1 (- -1))
    (= 1 (- 3 2)))

(test! /
    (= 0.2 (/ 5))
    (= 2.5 (/ 5 2))
    (= .5 (/ 5 2 5)))

(test! *
    (= 25 (* 5 5))
    (= -25 (* -5 5)))

(test! list-arithmetic
    ; Hiss supports special list and string arithmetic like Python
    (eq (list 1 2 3 4) (+ (list 1 2) (list 3) (list 4)))
    (eq (list 1 1 1 1) (* (list 1) 4))
    (eq (list 1 1 1 1) (* 4 (list 1)))
    (eq (list 1 1 1 1) (* (list 1) 2 2))
    (eq (list 1 1 1 1) (* 2 2 (list 1))))

(test! string-arithmetic    
    (eq "1234" (+ "12" "3" "4"))
    (eq "heyheyheyhey" (* "hey" 4))
    (eq "heyheyheyhey" (* 4 "hey"))
    (eq "heyheyheyhey" (* 2 2 "hey"))
    (eq "heyheyheyhey" (* "hey" 2 2)))

(if (bound? defgen)
    (test! defgen
        (defgen counter (max) (do-for i (range max) (yield i)))
        (setlocal! c (counter 5))
        (eq (list 0 1 2 3 4) (collect c))
        (setlocal! c (counter 5))
        (has-next c)
        (has-next c)
        (= 0 (next! c))
        (= 1 (next! c))
        (has-next c)
        (eq (list 2 3 4) (collect c))))

(test! let
    (eq "onetwo" (let (a "one" b "two") (+ a b)))
    (eq "onetwo" (let ((a "one") (b "two")) (+ a b)))
    ; All lets should be sequential:
    (eq (list 1 1 2) (let (a 1 b a c (+ a b)) (list a b c))))

(test! index-of
    (= 2 (index-of "heyy" "y"))
    (= 2 (index-of "heyy" "y" 2))
    (= 3 (index-of "heyy" "y" 3))
    (= 2 (index-of '(h e y y) 'y))
    (= 2 (index-of '(h e y y) 'y 2))
    (= 3 (index-of '(h e y y) 'y 3))
    (= 3 (index-of "heyy" "y" -1)))

(test! contains
    (contains "heyy" "y")
    (not (contains "hey" "hello"))
    (contains (list 1 2 3) 1))

(test! tree-replace
    (eq '(hey (whats up)) (tree-replace '(hey (shut up)) 'shut 'whats)))

(test! tree-contains
    (tree-contains '(4 5 6 (7 8 9)) 7) 
    (tree-contains '(4 5 6 (7 8 9)) 4)
    (not (tree-contains '(4 5 6 (7 8 9)) 10)))

(test! groups
    (eq '((6 5)) (groups '(6 5 3) 2))
    (eq '((6 5) (3)) (groups '(6 5 3) 2 t)))

(test! case
    (eq 'good (case (length '(one two three))
        (0 (error! "bad"))
        (3 'good)
        (default (error! "bad"))))
    (eq 'good (case (length '(one two three))
        (2 (error! "bad"))
        (default 'good)))
    // Catch the multiple evaluation bug:
    (prints "once" (case (print 'once)
        ('twice "nope")
        ('thrice "also nope"))))

(test! list-bracket-syntax
    (eq (list 1 2 3) [1 2 3])
    (eq (list 1 2 3) [  1 2    3 ]))

(test! if-let
    (eq "me" (if-let (fork "me") fork "buns"))
    (eq "buns" (if-let (fork nil) fork "buns")))

(test! list-copy
    (let (l [1 2 3] c (list-copy l))
        (clear! c)
        (and (eq [1 2 3] l) (eq [] c))))

// TODO
(test! zip)
// TODO
(test! while)
// TODO 
(test! when-let)
// TODO
(test! when)
// TODO
(test! version)
// TODO
(test! use-readtable!)
// TODO
(test! unless)

(test! (try catch)
    (eq 5 (try 5 nil))
    (nil? (try (error! "error on purpose")))
    (eq 5 (try (error! "error on purpose") 5))
    (eq "Error: 5" (try (error! 5) (catch (e) "Error: $e")))) 

// TODO
(test! trim)
// TODO
(test! to-print)
// TODO
(test! to-message)
// TODO
(test! the)
// TODO
(test! test!)
// TODO
(test! symbol?)
// TODO
(test! subtract)

(test! index)

(test! (substring substr)
    (eq "bcd" (substring "abcd" 1))
    (eq "cd" (substring "abcd" -2)))

// TODO
(test! string?)
// TODO
(test! starts-with)
// TODO
(test! split)
// TODO
(test! sort)

(test! slice
    (eq [3] (slice [1 2 3] -1))
    (eq [2] (slice [1 2 3] -2 -1)))

// TODO
(test! sleep!)
// TODO
(test! setlocal!)

(test! set-nth!
    (setlocal! l [1 2 3 4])
    (eq [1 2 6 4] (set-nth! l 2 6))
    (eq [1 2 6 4] l)
    (eq [1 2 6 7] (set-nth! l -1 7))
    (eq [1 2 6 7] l))

// TODO
(test! set-macro-string!)
// TODO
(test! set-default-read-function!)
// TODO
(test! set-default!)
// TODO
(test! set!)
// TODO
(test! rtrim)
// TODO
(test! rpad)
// TODO
(test! reverse)
// TODO
(test! rest)
// TODO
(test! replace)
// TODO
(test! repl)
// TODO
(test! register-method!)
// TODO
(test! read-symbol!)
// TODO
(test! read-string!)
// TODO
(test! read-number!)
// TODO
(test! read-next!)
// TODO
(test! read-line!)
// TODO
(test! read-delimited-list!)
// TODO
(test! read-all)
// TODO
(test! read)
// TODO
(test! range)
// TODO
(test! random)
// TODO
(test! quote)
// TODO
(test! quit!)
// TODO
(test! quit)
// TODO
(test! push!)
// TODO
(test! prints)
// TODO
(test! print!)
// TODO
(test! print)
// TODO
(test! peek)
// TODO
(test! pair?)
// TODO
(test! object?)
// TODO
(test! number?)
// TODO
(test! not)
// TODO
(test! nil?)
// TODO
(test! next!)
// TODO
(test! new)
// TODO
(test! multiply)
// TODO
(test! mod)
// TODO
(test! message!)
// TODO
(test! memoize)
// TODO
(test! macro?)
// TODO
(test! ltrim)
// TODO
(test! lpad)
// TODO
(test! loop)
// TODO
(test! load!)
// TODO
(test! list?)
// TODO
(test! list)
// TODO
(test! lesser-equal)
// TODO
(test! lesser)

(test! length
    (eq 5 (length [1 2 3 4 5]))
    (eq 5 (length "abcde")))

(test! last-index-of
    (eq 5 (last-index-of "abcabc" "c"))
    (eq 2 (last-index-of "abcabc" "c" -2)))

// TODO
(test! last)

// TODO 
(test! lambda)

// TODO
(test! iterator-to-iterable)
// TODO
(test! iterator)
// TODO
(test! iterable)
// TODO
(test! int?)
// TODO
(test! int)
// TODO
(test! input-symbol!)
// TODO
(test! input-string!)
// TODO
(test! input-int!)
// TODO
(test! input-float!)
// TODO
(test! input-expression!)
// TODO
(test! input-choice!)
// TODO
(test! if)
// TODO
(test! home-dir)
// TODO
(test! help)
// TODO
(test! has-next)
// TODO
(test! greater-equal)
// TODO
(test! greater)
// TODO
(test! get-env)
// TODO
(test! get-content)
// TODO
(test! function?)
// TODO
(test! funcall-inline)
// TODO
(test! funcall)
// TODO
(test! float?)
// TODO
(test! float)
// TODO
(test! filter)
// TODO
(test! error!)
// TODO
(test! equal)
// TODO
(test! eq)
// TODO
(test! enumerate)
// TODO
(test! ends-with)
// TODO
(test! enable-cc!)
// TODO
(test! empty?)
// TODO
(test! empty-readtable)
// TODO
(test! docs)
// TODO
(test! divide)
// TODO
(test! disable-cc!)
// TODO
(test! dict?)
// TODO
(test! dict-put!)
// TODO
(test! dict-key-value-iterator)
// TODO
(test! dict-iterator)
// TODO
(test! dict-exists)
// TODO
(test! dict-copy)
// TODO
(test! delay!)
// TODO
(test! defvar)
// TODO
(test! defun)
// TODO
(test! deftype)
// TODO
(test! defstruct)
// TODO
(test! defmacro)
// TODO
(test! defalias)
// TODO
(test! def-reader-macro)
// TODO
(test! current-continuation)
// TODO
(test! copy-readtable)
// TODO
(test! cons)
// TODO
(test! cond)
// TODO
(test! collect)
// TODO
(test! clear!)

(test! char-at
    (eq "a" (char-at "abc" 0))
    (eq "b" (char-at "abc" 1))
    (eq "c" (char-at "abc" -1)))

// TODO
(test! callable?)
// TODO
(test! call/cc)
// TODO
(test! call-haxe)
// TODO
(test! call-cc)
// TODO
(test! bound?)
// TODO
(test! bool?)
// TODO
(test! begin)
// TODO
(test! args)
// TODO
(test! apply)
// TODO
(test! append)
// TODO
(test! any?)
// TODO
(test! add)
// TODO
(test! Type:create-instance)
// TODO
(test! Thread:send-message!)
// TODO
(test! Thread:read-message!)
// TODO
(test! Thread:current)
// TODO
(test! Thread:create!)
// TODO
(test! Mutex:try-acquire!)
// TODO
(test! Mutex:release!)
// TODO
(test! Mutex:acquire!)
// TODO
(test! Lock:wait!)
// TODO
(test! Lock:release!)
// TODO
(test! Http:set-post-data!)
// TODO
(test! Http:set-parameter!)
// TODO
(test! Http:set-header!)
// TODO
(test! Http:request-url)
// TODO
(test! Http:request!)
// TODO
(test! HTTP:set-post-data!)
// TODO
(test! HTTP:set-parameter!)
// TODO
(test! HTTP:set-header!)
// TODO
(test! HTTP:request-url)
// TODO
(test! HTTP:request!)
// TODO
(test! HStream:to-string)
// TODO
(test! HStream:take-until-whitespace!)
// TODO
(test! HStream:take-until!)
// TODO
(test! HStream:take-line-as-stream!)
// TODO
(test! HStream:take-line!)
// TODO
(test! HStream:take!)
// TODO
(test! HStream:set-raw-string!)
// TODO
(test! HStream:set-pos!)
// TODO
(test! HStream:put-back!)
// TODO
(test! HStream:position)
// TODO
(test! HStream:peek-until-whitespace)
// TODO
(test! HStream:peek-until)
// TODO
(test! HStream:peek-line)
// TODO
(test! HStream:peek-all)
// TODO
(test! HStream:peek-ahead)
// TODO
(test! HStream:peek)
// TODO
(test! next-token!)
// TODO
(test! HStream:next-is-whitespace)
// TODO
(test! HStream:next-is-one-of)
// TODO
(test! HStream:length)
// TODO
(test! HStream:index-of)
// TODO
(test! HStream:get-raw-string)
// TODO
(test! HStream:get-pos)
// TODO
(test! HStream:get-line)
// TODO
(test! HStream:from-string)
// TODO
(test! HStream:from-file)
// TODO
(test! HStream:every-index-of)
// TODO
(test! HStream:empty?)
// TODO
(test! HStream:drop-whitespace!)
// TODO
(test! HStream:drop-while-one-of!)
// TODO
(test! HStream:drop-if-one-of!)
// TODO
(test! HStream:drop!)

// TODO
(test! HStream:count-consecutive)
// TODO
(test! HStream:count-and-drop-consecutive!)
(test! HStream:take-lines-while-count-consecutive!
    (setlocal! ts  (HStream:from-string "***\n***\n***\n**"))
    (eq "***\n***\n***" (HStream:take-lines-while-count-consecutive! ts "*" 3)))
// TODO
(test! HStream:copy)
// TODO
(test! File:save-content!)
// TODO
(test! File:get-content)
// TODO
(test! Deque:push!)
// TODO
(test! Deque:pop!)
// TODO
(test! Deque:add!)
// TODO
(test! Date:now)
// TODO
(test! Date:get-year)
// TODO
(test! Date:get-timezone-offset)
// TODO
(test! Date:get-time)
// TODO
(test! Date:get-seconds)
// TODO
(test! Date:get-month)
// TODO
(test! Date:get-minutes)
// TODO
(test! Date:get-hours)
// TODO
(test! Date:get-day)
// TODO
(test! Date:get-date)
// TODO
(test! Date:from-time)
// TODO
(test! Date:from-string)
// TODO
(test! >=)
// TODO
(test! >)
// TODO
(test! =)
// TODO
(test! <=)
// TODO
(test! <)
// TODO
(test! %)

// TODO
(test! shell-command!)

(enable-cc!)
(test! "Issue #67"
    (begin
        (defun hey () (sleep! 1) "yo")
        (defun you () (sleep! 1) "ho ho")
        (eq "yo ho ho" "$(hey) $(you)")))
(disable-cc!)

(test! "Issue #53"
    (defun eat (meal &optional drink &rest other-snacks)
        [meal drink other-snacks])
    (eq ["pizza" "slurm" ["anchovies" "whatever"]] (eat "pizza" "slurm" "anchovies" "whatever"))
    (eq ["pizza" "slurm" []] (eat "pizza" "slurm"))
    (eq ["pizza" nil []] (eat "pizza")))

(test! (decorate! object get-property set-property!)
    (setlocal! ob (object "spoons" 0))
    (set-property! ob "fork" "knife")
    (eq 0 (get-property ob "spoons"))
    (eq "knife" (get-property ob "fork")))